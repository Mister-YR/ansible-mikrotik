#**********************************************************************************************************
# first of all need to install module to docker container
# $ docker ps
# $ docker exec -it awx_task
# $ ansible-galaxy collection install community.routeros
#**********************************************************************************************************

- hosts: all
  connection: network_cli
  gather_facts: true
#**********************************************************************************************************
# {{ ansible_date_time.date }} ansible system system date
# {{ ansible_net_hostname }}  get mikrotik-identity from facts
#**********************************************************************************************************

  tasks:
  # first you need import module *ansible_network_os=community.routeros.routeros*
  - name: Collect all facts from the device
    community.routeros.facts:
      gather_subset: all
  # create backup with identity from facts - ansible_net_hostname    
  - name: create backup
    routeros_command:
      commands: '/system backup save name=bcp-{{ ansible_net_hostname }}'
    register: cmdout
  - debug:
       var: cmdout.stdout_lines
  # create config-backup with identity from facts - ansible_net_hostname
  - name: create cfg
    routeros_command:
      commands: '/export file=cfg-{{ ansible_net_hostname }}'
    register: cmdout
  - debug:
       var: cmdout.stdout_lines
  # copy beckup to sftp and add date to file name - ansible_date_time.date
  - name: copy config to sftp
    routeros_command: 
      commands: '/tool fetch url=sftp:{{ sftp_addr }}/cfg-{{ ansible_net_hostname }}-{{ ansible_date_time.date }}.rsc src-path=cfg-{{ ansible_net_hostname }}.rsc user={{ sftp_user }} mode=ftp password={{ sftp_pass }} upload=yes'
    register: cmdout
  - name: copy backup to sftp
    routeros_command: 
      commands: '/tool fetch url=sftp:{{ sftp_addr }}/bcp-{{ ansible_net_hostname }}-{{ ansible_date_time.date }}.backup src-path=bcp-{{ ansible_net_hostname }}.backup user={{ sftp_user }} mode=ftp password={{ sftp_pass }} upload=yes'
    register: cmdout
